ALTER TABLE {databaseOwner}{objectQualifier}DnnForge_SubscriptionTools_Receipt
    ADD [Description] nvarchar(255)
GO

DROP PROCEDURE {databaseOwner}{objectQualifier}DnnForge_SubscriptionTools_ReceiptAdd
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}DnnForge_SubscriptionTools_ReceiptAdd
	@PortalID int,
	@ModuleID int, 
	@UserID int,
	@DateCreated datetime,
	@DateStart datetime,
	@DateEnd datetime,
	@Status nvarchar(255),
	@Name nvarchar(50), 
	@Description nvarchar(255), 
	@ServiceFee money,
	@BillingPeriod int, 
	@BillingFrequency int, 
	@Processor nvarchar(50),
	@ProcessorTxID nvarchar(50)
AS

INSERT INTO {databaseOwner}{objectQualifier}DnnForge_SubscriptionTools_Receipt (
	[PortalID],
	[ModuleID], 
	[UserID],
	[DateCreated],
	[DateStart],
	[DateEnd],
	[Status],
	[Name], 
	[Description], 
	[ServiceFee],
	[BillingPeriod],
	[BillingFrequency],
	[Processor],
	[ProcessorTxID]
) VALUES (
	@PortalID, 
	@ModuleID, 
	@UserID,
	@DateCreated,
	@DateStart,
	@DateEnd,
	@Status,
	@Name,
	@Description,
	@ServiceFee,
	@BillingPeriod,
	@BillingFrequency, 
	@Processor,
	@ProcessorTxID
)

select SCOPE_IDENTITY()
GO

DROP PROCEDURE {databaseOwner}{objectQualifier}DnnForge_SubscriptionTools_ReceiptList
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}DnnForge_SubscriptionTools_ReceiptList
	@PortalID int,
	@ModuleID int, 
	@UserID int,
	@UserName nvarchar(255)  
AS

SELECT     
	r.ReceiptID, 
	r.UserID, 
	r.PortalID, 
	r.ModuleID, 
	r.DateCreated, 
	r.DateStart, 
	r.DateEnd, 
	r.Status, 
	r.Name, 
	r.[Description],
	r.ServiceFee, 
	r.BillingPeriod, 
	r.BillingFrequency, 
	r.Processor, 
    r.ProcessorTxID, 
	u.FirstName, 
	u.LastName, 
	u.UserName, 
	u.Email,
	u.DisplayName

FROM         
	{databaseOwner}{objectQualifier}DnnForge_SubscriptionTools_Receipt r LEFT OUTER JOIN
        	{databaseOwner}{objectQualifier}Users u ON r.UserID = u.UserID
WHERE 
	(@UserID is null OR r.[UserID] = @UserID)
	and
	(@UserName is null OR u.[UserName] = @UserName) 
	and 
	r.[PortalID] = @PortalID 
	and
	(r.[ModuleID] is null or r.[ModuleID] = @ModuleID) 
ORDER BY 
	r.DateCreated DESC
GO

DROP PROCEDURE {databaseOwner}{objectQualifier}DnnForge_SubscriptionTools_ReceiptListExpired
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}DnnForge_SubscriptionTools_ReceiptListExpired
	@PortalID int,
	@ModuleID int, 
	@DatePeriod DateTime,
	@DateFrequency DateTime  
AS

SELECT
	r.[ReceiptID],
	r.[UserID],
	r.[PortalID],
	r.[ModuleID], 
	r.[DateCreated],
	r.[DateStart],
	r.[DateEnd],
	r.[Status],
	r.[Name],
	r.[Description],
	r.[ServiceFee],
	r.[BillingPeriod],
	r.[BillingFrequency],
	r.[Processor], 
	r.[ProcessorTxID],
	u.[FirstName],
	u.[LastName],
	u.[UserName],
	u.[Email],
	u.[DisplayName]    
FROM         
	{databaseOwner}{objectQualifier}DnnForge_SubscriptionTools_Receipt r LEFT OUTER JOIN
		{databaseOwner}{objectQualifier}Users u ON r.UserID = u.UserID
WHERE 
	r.[PortalID] = @PortalID
	and
	(r.[ModuleID] is null or r.[ModuleID] = @ModuleID) 
	and
	r.[DateEnd] < @DatePeriod  
	and
	r.[DateEnd] > GetDate() 
	and
	r.[ReceiptID] = (select top 1 ReceiptID from {databaseOwner}{objectQualifier}DnnForge_SubscriptionTools_Receipt r2 where r.userid = r2.userid order by DateCreated DESC)
	and
	r.[ReceiptID] not in (SELECT TOP 1 ReceiptID from {databaseOwner}{objectQualifier}DnnForge_SubscriptionTools_Reminder r3 where r.ReceiptID = r3.ReceiptID and DateSent > @DateFrequency ORDER BY DateSent DESC)
ORDER BY 
	DateCreated DESC
GO

DROP PROCEDURE {databaseOwner}{objectQualifier}DnnForge_SubscriptionTools_ReceiptGet
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}DnnForge_SubscriptionTools_ReceiptGet
	@ReceiptID int
AS

SELECT
	r.[ReceiptID],
	r.[UserID],
	r.[PortalID],
	r.[ModuleID], 
	r.[DateCreated],
	r.[DateStart],
	r.[DateEnd],
	r.[Status],
	r.[Name],
	r.[Description],
	r.[ServiceFee],
	r.[BillingPeriod],
	r.[BillingFrequency],
	r.[Processor], 
	r.[ProcessorTxID],
	u.[FirstName],
	u.[LastName],
	u.[UserName],
	u.[Email],
	u.DisplayName    
FROM         
	{databaseOwner}{objectQualifier}DnnForge_SubscriptionTools_Receipt r INNER JOIN
		{databaseOwner}{objectQualifier}Users u ON r.UserID = u.UserID
WHERE
	r.[ReceiptID] = @ReceiptID
GO

DROP PROCEDURE {databaseOwner}{objectQualifier}DnnForge_SubscriptionTools_GetReport4
GO

CREATE PROCEDURE {databaseOwner}{objectQualifier}DnnForge_SubscriptionTools_GetReport4
	@PortalID int,
	@ModuleID	int, 
	@DateStart	DateTime,
	@DateEnd	DateTime 
AS

CREATE TABLE #Aggregates
             (
              RowText VARCHAR(50),
              ColumnText VARCHAR(50),
              CellData MONEY
             )

INSERT INTO #Aggregates
            (
             RowText,
             ColumnText,
             CellData
            )
SELECT '', Name, COUNT(*)
FROM {databaseOwner}{objectQualifier}DnnForge_SubscriptionTools_Receipt
WHERE (DateEnd > GETDATE()) and (PortalID = @PortalID) and (ModuleID is null or ModuleID = @ModuleID) 
GROUP BY Name

CREATE TABLE #Columns
            (
             ColumnIndex INT IDENTITY (0, 1),
             ColumnText VARCHAR(50)
             )
 
INSERT INTO     #Columns
                (
                 ColumnText
                )
SELECT  ColumnText
FROM           #Aggregates 
GROUP BY  ColumnText
 
CREATE TABLE #Rows 
             (
              RowText VARCHAR(50)
             )
 
INSERT INTO    #Rows
                (
                 RowText
                )

SELECT DISTINCT RowText
FROM            #Aggregates 
 
DECLARE     @ColumnIndex INT,
            @MaxColumnIndex INT,
            @ColumnText VARCHAR(50),
            @SQL VARCHAR(1000)
 
SELECT      @ColumnIndex = 0,
            @MaxColumnIndex = MAX(ColumnIndex)
FROM        #Columns
 
IF( (SELECT COUNT(*) FROM #Columns) > 0 )
BEGIN
    WHILE @ColumnIndex <= @MaxColumnIndex
       BEGIN
          SELECT     @ColumnText = ColumnText
          FROM       #Columns
          WHERE      ColumnIndex = @ColumnIndex

          SELECT     @SQL = 'ALTER TABLE #Rows ADD ' + QUOTENAME(@ColumnText) + ' INT NULL DEFAULT 0'
          EXEC       (@SQL)
     
          SELECT     @SQL = 'UPDATE #Rows SET ' + QUOTENAME(@ColumnText) + ' = #Aggregates.CellData
                             FROM #Aggregates 
								        , #Columns  
								     WHERE #Rows.RowText = #Aggregates.RowText 
								     AND #Columns.ColumnText = #Aggregates.ColumnText 
								     AND #Columns.ColumnIndex = ' + CAST(@ColumnIndex AS VARCHAR(12))
          EXEC       (@SQL)
     
          SELECT  @ColumnIndex = @ColumnIndex + 1 
       END

    DROP TABLE #Columns
    DROP TABLE #Aggregates

    SELECT     @SQL = 'ALTER TABLE #Rows DROP COLUMN ' + QUOTENAME('RowText')
    EXEC       (@SQL)

    SELECT     #Rows.*
    FROM        #Rows

    DROP TABLE  #Rows
END
ELSE
BEGIN
	DROP TABLE #Columns
	DROP TABLE #Aggregates
	DROP TABLE  #Rows
END
GO

